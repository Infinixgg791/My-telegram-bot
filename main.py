import json
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

API_TOKEN = '7803421682:AAGw_ESeD5AjmIMeLJCZ9FwZ0gIV-HqBgYU'  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_CHAT_ID = 7693328161  # –í–∞—à Telegram ID
PROFILE_FILE = '.profiles.json'  # –°–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SupportStates(StatesGroup):
    waiting_for_support_message = State()
    waiting_for_admin_response = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞
def load_profiles():
    try:
        with open(PROFILE_FILE, 'r') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ñ–∞–π–ª
def save_profiles(profiles):
    with open(PROFILE_FILE, 'w') as file:
        json.dump(profiles, file)

profiles = load_profiles()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã.")
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_files = KeyboardButton("üìÅ –§–∞–π–ª—ã üìÅ")
    button_support = KeyboardButton("üìå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìå")
    button_instruction = KeyboardButton("‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ùì")
    button_profile = KeyboardButton("üß∏ –ü—Ä–æ—Ñ–∏–ª—å üß∏")  # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Ñ–∏–ª—å" —Å —ç–º–æ–¥–∑–∏

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(button_files, button_support, button_instruction)  # –¢—Ä–∏ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    keyboard.add(button_profile)  # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Ñ–∏–ª—å" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É, –∑–∞–Ω–∏–º–∞—é—â–∞—è –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É

    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(lambda message: message.text == "üß∏ –ü—Ä–æ—Ñ–∏–ª—å üß∏")
async def profile(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id not in profiles:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        creation_date = datetime.now().strftime('%d-%m-%Y')
        profiles[user_id] = {
            "username": message.from_user.username,
            "registered": True,
            "creation_date": creation_date
        }
        save_profiles(profiles)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ñ–∞–π–ª
        await message.answer(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        user_info = profiles[user_id]
        username = user_info['username']
        creation_date = user_info['creation_date']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        profile_text = (
            f"üß∏ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"‚ñ´Ô∏è ID: {user_id}\n"
            f"‚ñ´Ô∏è –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            f"‚ñ´Ô∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}"
        )

        await message.answer(profile_text)

@dp.message_handler(lambda message: message.text == "üìÅ –§–∞–π–ª—ã üìÅ")
async def send_files(message: types.Message):
    await message.answer("–í–æ—Ç –≤–∞—à–∏ —Ñ–∞–π–ª—ã:")
    
    for message_id in [620, 623]:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID
        try:
            await bot.forward_message(chat_id=message.chat.id, from_chat_id='@quickggcheats', message_id=message_id)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")

@dp.message_handler(lambda message: message.text == "üìå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üìå")
async def support(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ '–í—ã—Ö–æ–¥'.")
    await SupportStates.waiting_for_support_message.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    users[message.from_user.id] = message.chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message_handler(lambda message: message.text == "‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ùì")
async def instruction(message: types.Message):
    instruction_text = (
        "üî¥ –°–∫–∞—á–∏–≤–∞–π—Ç–µ Gspace üî¥\n"
        "‚≠ï –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –Ω–µ–≥–æ GameGuardian –∏ Matreshka RP ‚≠ï\n"
        "üíé –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ GameGuardian üíé\n"
        "üîπ –ó–∞—Ç–µ–º –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –ú–∞—Ç—Ä–µ—à–∫—É –†–ü –∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤ GameGuardian –ø—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã Matreshka RP (–ù–ï Metrica) üîπ\n"
        "üåÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç, –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –µ—Å—Ç—å –∑–Ω–∞—á–æ–∫ play, –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '...' —Ç—Ä–∏ —Ç–æ—á–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ Lua —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ üåÄ"
    )
    await message.answer(instruction_text)

@dp.message_handler(state=SupportStates.waiting_for_support_message, content_types=types.ContentTypes.TEXT)
async def process_support_message(message: types.Message, state: FSMContext):
    if message.text.lower() == "–≤—ã—Ö–æ–¥":
        await message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîî:\n"
                f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username}\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n"
                f"–û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: /reply {message.from_user.id} <–≤–∞—à –æ—Ç–≤–µ—Ç>"
            )
            await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        finally:
            await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message_handler(lambda message: message.text.startswith('/reply'), state='*')
async def reply_to_user(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == ADMIN_CHAT_ID:
        parts = message.text.split(' ', 2)  # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        if len(parts) < 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /reply <user_id> <–≤–∞—à –æ—Ç–≤–µ—Ç>")
            return
        
        user_id = int(parts[1])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reply_text = parts[2]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞

        if user_id in users:
            await bot.send_message(
                users[user_id],
                f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üîî:\n{reply_text} üîπ"
            )
            await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.")

@dp.message_handler()
async def unknown_command(message: types.Message):
    await message.answer("‚ÅâÔ∏è –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É...")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
